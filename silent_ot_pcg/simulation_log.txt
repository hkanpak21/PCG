--- Simulation: sVOLE PCG Execution ---
Parameters: n=8, k=4, t=2
--- Step 1: Initialization ---
LPN Parameters created: n=8, k=4, t=2, type=RandomLinear
Executing SvolePcg::new...
  >> Warning: Generating LPN matrix with swapped dimensions...
  >> Regenerating placeholder matrix with correct n x k dimensions.
SvolePcg instance created. Holds LPN params and H matrix (n x k).
--- Step 2: Seed Generation (Placeholder) ---
Calling SvolePcg::gen(128, lpn_params)...
  >> Warning: Using placeholder DPF keys in sVOLE Gen. Secure generation needed.
Seed generation complete.
  P0 receives SvoleSenderSeed (seed0).
  P1 receives SvoleReceiverSeed (seed1).
--- Step 3: Expansion Setup ---
P1 (sVOLE Receiver) chooses random delta: [delta_value]
P1 conceptually sends delta to P0.
  (Note: Simplification for VOLE calculation; delta is P1's input.)
--- Step 4a: Expansion P0 (Sender) ---
P0 calls svole_pcg.expand(0, seed0, delta)...
  Executing Dpf::full_eval(k_dpf0)... (using fixed AES key)
    >> Got e0 (size 8) = [random_bits_e0]
  Assigning u = e0
  Executing matrix_vector_multiply_f2(H, s)...
    >> Got v0_f2 (size 8) = [random_bits_v0]
  Executing map_f2_to_fq(v0_f2, delta)...
    >> Got mapped_v0 (size 8)
  Executing map_f2_to_fq(u, delta)...
    >> Got mapped_u (size 8)
  Computing v = mapped_v0 + mapped_u (using galois::GF2e128)...
    >> Got v (size 8)
P0 Expand complete.
--- Step 4b: Expansion P1 (Receiver) ---
P1 calls svole_pcg.expand(1, seed1, delta)...
  Executing Dpf::full_eval(k_dpf1)... (using fixed AES key)
    >> Got e1 (size 8) = [random_bits_e1]
  Executing matrix_vector_multiply_fq(H, x)... (using galois::GF2e128)
    >> Got v1 (size 8) = [random_field_elements_v1]
  Executing map_f2_to_fq(e1, delta)...
    >> Got mapped_e1 (size 8)
  Computing w = v1 + mapped_e1 (using galois::GF2e128)...
    >> Got w (size 8)
P1 Expand complete.
--- Step 5: Verification & Use Case ---
Verification: Check if v = u*delta + w holds.
  (Code performs this check internally in tests - Passed based on current logic)
Result: 8 correlated sVOLE instances generated.
  P0 holds (u, v)
  P1 holds (delta, w)
Conceptual Use Case: Building Block for MPC
The generated pairs (u, v) for P0 and (delta, w) for P1 satisfy v = u*delta + w.
This correlated randomness is a fundamental building block.
For example, it can be used efficiently within protocols for:
  - Secure Multiplication (Beaver Triples): Combining VOLE with multiplication by constants.
  - Secure Comparisons.
  - Other linear algebra operations over finite fields.
The key benefit is generating these N correlations with sublinear communication (via the interactive seed generation) and fast local expansion.
--- Simulation End ---
